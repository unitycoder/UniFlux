@startuml
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action, condition:bool) : void
    + {static} Dispatch(key:int) : void
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action<T>, condition:bool) : void
    + {static} Dispatch(key:int, @param:T) : void
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Func<T>, condition:bool) : void
    + {static} Dispatch(key:int) : T
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Func<T, T2>, condition:bool) : void
    + {static} Dispatch(key:int, @param:T) : T2
}
class FluxExtension <<static>> <<partial>> {
    + {static} StoreState(key:int, action:Action<T>, condition:bool) : void
    + {static} DispatchState(key:int, state:T) : void
    + {static} GetState(key:int, state:T) : bool
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action<IEnumerator>, condition:bool) : void
    + {static} Store(key:int, action:Func<IEnumerator>, condition:bool) : void
    + {static} Store(key:int, action:Func<IEnumerator<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, IEnumerator>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, IEnumerator<T2>>, condition:bool) : void
    + {static} @IEnumerator(key:int) : IEnumerator
    + {static} @IEnumerator(key:int) : IEnumerator<T>
    + {static} @IEnumerator(key:int, @param:T) : IEnumerator
    + {static} @IEnumerator(key:int, @param:T) : IEnumerator<T2>
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action<Task>, condition:bool) : void
    + {static} Store(key:int, action:Func<Task>, condition:bool) : void
    + {static} Store(key:int, action:Func<Task<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, Task>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, Task<T2>>, condition:bool) : void
    + {static} @Task(key:int) : Task
    + {static} @Task(key:int) : Task<T>
    + {static} @Task(key:int, @param:T) : Task
    + {static} @Task(key:int, @param:T) : Task<T2>
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action<IObservable<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<IObservable<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, IObservable<T2>>, condition:bool) : void
    + {static} @IObservable(key:int, @param:IObservable<T>) : void
    + {static} @IObservable(key:int) : IObservable<T>
    + {static} @IObservable(key:int, @param:T) : IObservable<T2>
}
class FluxExtension <<static>> <<partial>> {
    + {static} Store(key:int, action:Action<IObserver<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<IObserver<T>>, condition:bool) : void
    + {static} Store(key:int, action:Func<T, IObserver<T2>>, condition:bool) : void
    + {static} @IObserver(key:int, @param:IObserver<T>) : void
    + {static} @IObserver(key:int) : IObserver<T>
    + {static} @IObserver(key:int, @param:T) : IObserver<T2>
}
@enduml
